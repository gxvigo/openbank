paths:
  /banks:
    post:
      tags:
        - bank
      summary: Create a new instance of the model and persist it into the data source.
      operationId: bank.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/bank'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/bank'
      deprecated: false
    put:
      tags:
        - bank
      summary: >-
        Update an existing model instance or insert a new one into the data
        source.
      operationId: bank.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/bank'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/bank'
      deprecated: false
    get:
      tags:
        - bank
      summary: Find all instances of the model matched by filter from the data source.
      operationId: bank.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/bank'
      deprecated: false
  '/banks/{id}/exists':
    get:
      tags:
        - bank
      summary: Check whether a model instance exists in the data source.
      operationId: 'bank.exists__get_banks_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/banks/{id}':
    head:
      tags:
        - bank
      summary: Check whether a model instance exists in the data source.
      operationId: 'bank.exists__head_banks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - bank
      summary: Find a model instance by id from the data source.
      operationId: bank.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/bank'
      deprecated: false
    delete:
      tags:
        - bank
      summary: Delete a model instance by id from the data source.
      operationId: bank.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - bank
      summary: >-
        Update attributes for a model instance and persist it into the data
        source.
      operationId: bank.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/bank'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/bank'
      deprecated: false
  /banks/findOne:
    get:
      tags:
        - bank
      summary: Find first instance of the model matched by filter from the data source.
      operationId: bank.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/bank'
      deprecated: false
  /banks/update:
    post:
      tags:
        - bank
      summary: Update instances of the model matched by where from the data source.
      operationId: bank.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/bank'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /banks/count:
    get:
      tags:
        - bank
      summary: Count instances of the model matched by where from the data source.
      operationId: bank.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /banks/change-stream:
    post:
      tags:
        - bank
      summary: Create a change stream.
      operationId: bank.createChangeStream__post_banks_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - bank
      summary: Create a change stream.
      operationId: bank.createChangeStream__get_banks_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
definitions:
  bank:
    properties:
      id:
        description: bank id
        type: string
      logo:
        description: URL of bank log
        type: string
      long_name:
        description: bank long name
        type: string
      short_name:
        description: bank short name
        type: string
      website:
        description: bank website URL
        type: string
    required:
      - id
      - logo
      - long_name
      - short_name
      - website
    additionalProperties: false
  x-any:
    properties: {}
swagger: '2.0'
info:
  x-ibm-name: openbank
  version: 1.0.0
  title: openbank
schemes:
  - https
host: $(catalog.host)
basePath: /api
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
